
[[winlogbeat-configuration-details]]
== Configuration Options

Before modifying configuration settings, make sure you've read <<winlogbeat-configuration>>.

The Winlogbeat configuration file uses http://yaml.org/[YAML] for its syntax.
The file contains config options common to all Beats. These options are described
in the following sections of the {libbeat}/configuration.html[Beats Platform Reference]:

* {libbeat}/configuration.html#configuration-shipper[Shipper]
* {libbeat}/configuration.html#configuration-output[Output]
* {libbeat}/configuration.html#configuration-logging[Logging (Optional)]
* {libbeat}/configuration.html#configuration-run-options[Run Options (Optional)]

The Winlogbeat config options are described here:

* <<configuration-winlogbeat-options>>

[[configuration-winlogbeat-options]]
=== Winlogbeat

The `winlogbeat` section specifies all options that are specific to Winlogbeat.
Most importantly, it contains the list of event logs to monitor.

Here is a sample configuration:

[source,yaml]
--------------------------------------------------------------------------------
winlogbeat:
  registry_file: C:/ProgramData/winlogbeat/.winlogbeat.yaml
  event_logs:
    - name: Application
      ignore_older: 72h
    - name: Security
    - name: System

--------------------------------------------------------------------------------

==== Options

===== registry_file

The name of the file where information is stored that enables Winlogbeat to
resume monitoring after a restart. By default the file is stored as
`.winlogbeat.yaml` in the directory in which the Beat was started. It is
recommended that the value be set to `C:/ProgramData/winlogbeat/.winlogbeat.yaml`
when the process is being run as a Windows service.

[source,yaml]
--------------------------------------------------------------------------------
winlogbeat:
  registry_file: C:/ProgramData/winlogbeat/.winlogbeat.yaml
--------------------------------------------------------------------------------

NOTE: The forward slashes in the path are automatically changed to back slashes
for Windows compatibility. Either forward or back slashes may be used. Forward
slashes are easier to work with in YAML because there is no need to escape them.

===== event_logs

In YAML terminology, `event_logs` is defined as a list of dictionaries. Each
entry in the list defines an event log to monitor as well as any information to
be associated with the event log (filter, tags, etc.). Name is the only required
field for each event log.

[source,yaml]
--------------------------------------------------------------------------------
winlogbeat:
  event_logs:
    - name: Application
--------------------------------------------------------------------------------

===== event_logs.name

Each dictionary under `event_logs` must have a `name` field. You can get a list
of available logs by running `Get-EventLog *` in PowerShell. Alternatively, you
can look at the registry keys found under
`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog`.

===== event_logs.ignore_older

The optional `ignore_older` field may be specified to filter events that are
older then the specified amount of time. Valid time units are "ns",
"us" (or "Âµs"), "ms", "s", "m", "h". This option is useful when you are
beginning to monitor an event log that contains older records that you would
like to ignore.

[source,yaml]
--------------------------------------------------------------------------------
winlogbeat:
  event_logs:
    - name: Application
      ignore_older: 168h
--------------------------------------------------------------------------------

===== metrics.bindaddress

The optional `metrics.bindaddress` configuration option specifies a hostname and
port at which the Beat will host an HTTP web service providing metrics.

[source,yaml]
--------------------------------------------------------------------------------
winlogbeat:
  metrics:
    bindaddress: 'localhost:8123'
--------------------------------------------------------------------------------

In the example above, the metrics service would be available at
http://localhost:8128/debug/vars. The metrics are served as a JSON document. The
metrics include:

- memory stats
- number of filtered events from each log
- number of published events from each log
- total number of failures while publishing
- total number of filtered events
- total number of successfully published events
- uptime
